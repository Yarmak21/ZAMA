Звичайно, ось приклад простого коду на Python, який демонструє використання блокчейну. Цей код створює простий блокчейн з використанням класу `Block` та класу `Blockchain`.

```python
import hashlib
import json
from time import time

class Block:
    def __init__(self, index, timestamp, transactions, previous_hash):
        self.index = index
        self.timestamp = timestamp
        self.transactions = transactions
        self.previous_hash = previous_hash
        self.nonce = 0
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        block_string = json.dumps(self.__dict__, sort_keys=True)
        return hashlib.sha256(block_string.encode()).hexdigest()

    def mine_block(self, difficulty):
        while self.hash[:difficulty] != '0' * difficulty:
            self.nonce += 1
            self.hash = self.calculate_hash()
        print(f"Block mined: {self.hash}")

class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]
        self.difficulty = 4
        self.pending_transactions = []
        self.mining_reward = 100

    def create_genesis_block(self):
        return Block(0, time(), [], '0')

    def get_latest_block(self):
        return self.chain[-1]

    def add_transaction(self, sender, recipient, amount):
        self.pending_transactions.append({
            'sender': sender,
            'recipient': recipient,
            'amount': amount
        })

    def mine_pending_transactions(self, mining_reward_address):
        block = Block(len(self.chain), time(), self.pending_transactions, self.get_latest_block().hash)
        block.mine_block(self.difficulty)
        self.chain.append(block)
        self.pending_transactions = [{'sender': 'Mining Reward', 'recipient': mining_reward_address, 'amount': self.mining_reward}]

    def is_chain_valid(self):
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i - 1]

            if current_block.hash != current_block.calculate_hash():
                return False
            if current_block.previous_hash != previous_block.hash:
                return False
        return True

# Приклад використання
blockchain = Blockchain()

blockchain.add_transaction('Alice', 'Bob', 50)
blockchain.add_transaction('Bob', 'Charlie', 30)
blockchain.add_transaction('Charlie', 'Alice', 20)

print("Mining block 1...")
blockchain.mine_pending_transactions('Miner1')

print("Mining block 2...")
blockchain.mine_pending_transactions('Miner2')

print(f"Is blockchain valid? {blockchain.is_chain_valid()}")

print("Blockchain:", json.dumps(blockchain.__dict__, default=lambda o: o.__dict__, indent=4))
```

Цей код створює простий блокчейн, додає транзакції та виконує майнінг блоків. Ви можете запустити цей код та спостерігати за процесом створення блокчейну, додаванням транзакцій та перевіркою валідності ланцюга.
